# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
import os
from pathlib import Path
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
from app.constants import PupilEnum
from app.models import Employee, WorkerController

__all__ = ['init_gui']

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("./assets")

# files constants
FILE_NAME = 'file.txt'
FILE_PATH = Path(__file__).parent / Path('./workdir')


class Gui:

    def __init__(self):
        self.maintainer = WorkerController()

        self.window = Tk()
        self.window.geometry("640x480")
        self.window.configure(bg="#22282C")
        self.window.resizable(False, False)

        self.canvas = Canvas(
            self.window,
            bg="#22282C",
            height=480,
            width=640,
            bd=0,
            highlightthickness=0,
            relief="ridge"
        )

        self.canvas.place(x=0, y=0)
        self.canvas.create_rectangle(
            0.0,
            0.0,
            49.0,
            480.0,
            fill="#2D353D",
            outline="")

        self.button_image_1 = PhotoImage(
            file=relative_to_assets("button_1.png"))
        self.button_1 = Button(
            image=self.button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.window.destroy(),
            relief="flat"
        )
        self.button_1.place(
            x=0.0,
            y=438.0,
            width=49.0,
            height=42.0
        )

        self.canvas.create_rectangle(
            50.0,
            209.0,
            641.0,
            211.0,
            fill="#4C5154",
            outline="")

        self.canvas.create_rectangle(
            50.0,
            317.0,
            641.0,
            319.0,
            fill="#4C5154",
            outline="")

        self.button_image_2 = PhotoImage(
            file=relative_to_assets("button_2.png"))
        self.button_2 = Button(
            image=self.button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.add_worker(),
            relief="flat"
        )
        self.button_2.place(
            x=471.0,
            y=172.0,
            width=140.0,
            height=25.0
        )

        self.button_image_3 = PhotoImage(
            file=relative_to_assets("button_3.png"))
        self.button_3 = Button(
            image=self.button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.maintainer.show_workers(),
            relief="flat"
        )
        self.button_3.place(
            x=471.0,
            y=256.0,
            width=140.0,
            height=25.0
        )

        self.button_image_4 = PhotoImage(
            file=relative_to_assets("button_4.png"))
        self.button_4 = Button(
            image=self.button_image_4,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.maintainer.sort(PupilEnum.FIRST_NAME.value),
            relief="flat"
        )
        self.button_4.place(
            x=81.0,
            y=371.0,
            width=140.0,
            height=25.0
        )

        self.button_image_5 = PhotoImage(
            file=relative_to_assets("button_5.png"))
        self.button_5 = Button(
            image=self.button_image_5,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.maintainer.sort(PupilEnum.LAST_NAME.value),
            relief="flat"
        )
        self.button_5.place(
            x=81.0,
            y=406.0,
            width=140.0,
            height=25.0
        )

        self.button_image_6 = PhotoImage(
            file=relative_to_assets("button_6.png"))
        self.button_6 = Button(
            image=self.button_image_6,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.maintainer.sort(PupilEnum.SEX.value),
            relief="flat"
        )
        self.button_6.place(
            x=81.0,
            y=441.0,
            width=140.0,
            height=25.0
        )

        self.button_image_7 = PhotoImage(
            file=relative_to_assets("button_7.png"))
        self.button_7 = Button(
            image=self.button_image_7,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.maintainer.sort(PupilEnum.SPECIALIZATION.value),
            relief="flat"
        )
        self.button_7.place(
            x=276.0,
            y=406.0,
            width=140.0,
            height=25.0
        )

        self.button_image_8 = PhotoImage(
            file=relative_to_assets("button_8.png"))
        self.button_8 = Button(
            image=self.button_image_8,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.maintainer.sort(PupilEnum.GRADE_CLASS.value),
            relief="flat"
        )
        self.button_8.place(
            x=276.0,
            y=371.0,
            width=140.0,
            height=25.0
        )

        self.button_image_9 = PhotoImage(
            file=relative_to_assets("button_9.png"))
        self.button_9 = Button(
            image=self.button_image_9,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.maintainer.sort(PupilEnum.POSITION.value),
            relief="flat"
        )
        self.button_9.place(
            x=471.0,
            y=371.0,
            width=140.0,
            height=25.0
        )

        self.button_image_10 = PhotoImage(
            file=relative_to_assets("button_10.png"))
        self.button_10 = Button(
            image=self.button_image_10,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.maintainer.pop(),
            relief="flat"
        )
        self.button_10.place(
            x=471.0,
            y=287.0,
            width=140.0,
            height=25.0
        )

        self.button_image_12 = PhotoImage(
            file=relative_to_assets("button_12.png"))
        self.button_12 = Button(
            image=self.button_image_12,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.read_file(),
            relief="flat"
        )
        self.button_12.place(
            x=81.0,
            y=256.0,
            width=140.0,
            height=25.0
        )

        self.button_image_13 = PhotoImage(
            file=relative_to_assets("button_13.png"))
        self.button_13 = Button(
            image=self.button_image_13,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.clear_file(),
            relief="flat"
        )
        self.button_13.place(
            x=81.0,
            y=287.0,
            width=140.0,
            height=25.0
        )

        self.button_image_11 = PhotoImage(
            file=relative_to_assets("button_11.png"))
        self.button_11 = Button(
            image=self.button_image_11,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.add_to_file(),
            relief="flat"
        )
        self.button_11.place(
            x=276.0,
            y=172.0,
            width=140.0,
            height=25.0
        )

        self.canvas.create_rectangle(
            471.0,
            53.0,
            611.0,
            83.0,
            fill="#4C5154",
            outline="")

        self.entry_image_1 = PhotoImage(
            file=relative_to_assets("entry_1.png"))
        self.entry_bg_1 = self.canvas.create_image(
            541.0,
            74.0,
            image=self.entry_image_1
        )
        self.entry_1 = Entry(
            bd=0,
            bg="#4C5154",
            highlightthickness=0
        )
        self.entry_1.place(
            x=471.0,
            y=65.0,
            width=140.0,
            height=16.0
        )

        self.canvas.create_text(
            476.0,
            56.0,
            anchor="nw",
            text="Position",
            fill="#FBFBFB",
            font=("Roboto", 8 * -1)
        )

        self.entry_image_2 = PhotoImage(
            file=relative_to_assets("entry_2.png"))
        entry_bg_2 = self.canvas.create_image(
            346.0,
            119.0,
            image=self.entry_image_2
        )
        self.entry_2 = Entry(
            bd=0,
            bg="#4C5154",
            highlightthickness=0
        )
        self.entry_2.place(
            x=276.0,
            y=110.0,
            width=140.0,
            height=16.0
        )

        self.canvas.create_rectangle(
            276.0,
            53.0,
            416.0,
            83.0,
            fill="#4C5154",
            outline="")

        self.canvas.create_rectangle(
            276.0,
            98.0,
            416.0,
            128.0,
            fill="#4C5154",
            outline="")

        self.canvas.create_text(
            280.0,
            101.0,
            anchor="nw",
            text="Specialization",
            fill="#FBFBFB",
            font=("Roboto", 8 * -1)
        )

        self.entry_image_3 = PhotoImage(
            file=relative_to_assets("entry_3.png"))
        entry_bg_3 = self.canvas.create_image(
            346.0,
            74.0,
            image=self.entry_image_3
        )
        self.entry_3 = Entry(
            bd=0,
            bg="#4C5154",
            highlightthickness=0
        )
        self.entry_3.place(
            x=276.0,
            y=65.0,
            width=140.0,
            height=16.0
        )

        self.canvas.create_text(
            280.0,
            56.0,
            anchor="nw",
            text="Grade class",
            fill="#FBFBFB",
            font=("Roboto", 8 * -1)
        )

        self.entry_image_4 = PhotoImage(
            file=relative_to_assets("entry_4.png"))
        entry_bg_4 = self.canvas.create_image(
            151.0,
            164.0,
            image=self.entry_image_4
        )
        self.entry_4 = Entry(
            bd=0,
            bg="#4C5154",
            highlightthickness=0
        )
        self.entry_4.place(
            x=81.0,
            y=155.0,
            width=140.0,
            height=16.0
        )

        self.canvas.create_rectangle(
            81.0,
            143.0,
            221.0,
            173.0,
            fill="#4C5154",
            outline="")

        self.canvas.create_rectangle(
            81.0,
            98.0,
            221.0,
            128.0,
            fill="#4C5154",
            outline="")

        self.canvas.create_rectangle(
            81.0,
            53.0,
            221.0,
            83.0,
            fill="#4C5154",
            outline="")

        self.canvas.create_text(
            86.0,
            146.0,
            anchor="nw",
            text="Sex",
            fill="#FBFBFB",
            font=("Roboto", 8 * -1)
        )

        self.entry_image_5 = PhotoImage(
            file=relative_to_assets("entry_5.png"))
        self.entry_bg_5 = self.canvas.create_image(
            151.0,
            119.0,
            image=self.entry_image_5
        )
        self.entry_5 = Entry(
            bd=0,
            bg="#4C5154",
            highlightthickness=0
        )
        self.entry_5.place(
            x=81.0,
            y=110.0,
            width=140.0,
            height=16.0
        )

        self.canvas.create_text(
            86.0,
            101.0,
            anchor="nw",
            text="Second name",
            fill="#FBFBFB",
            font=("Roboto", 8 * -1)
        )

        self.entry_image_6 = PhotoImage(
            file=relative_to_assets("entry_6.png"))
        self.entry_bg_6 = self.canvas.create_image(
            151.0,
            74.0,
            image=self.entry_image_6
        )
        self.entry_6 = Entry(
            bd=0,
            bg="#4C5154",
            highlightthickness=0
        )
        self.entry_6.place(
            x=81.0,
            y=65.0,
            width=140.0,
            height=16.0
        )

        self.canvas.create_text(
            86.0,
            56.0,
            anchor="nw",
            text="First name",
            fill="#FBFBFB",
            font=("Roboto", 8 * -1)
        )

        self.canvas.create_text(
            304.0,
            14.0,
            anchor="nw",
            text="Creation",
            fill="#FBFBFB",
            font=("Roboto", 22 * -1)
        )

        self.canvas.create_text(
            310.0,
            224.0,
            anchor="nw",
            text="Control",
            fill="#FBFBFB",
            font=("Roboto", 22 * -1)
        )

        self.canvas.create_text(
            310.0,
            332.0,
            anchor="nw",
            text="Sorting",
            fill="#FBFBFB",
            font=("Roboto", 22 * -1)
        )

        self.window.mainloop()

    def add_worker(self):
        """ Добавляет сотрулника в список сотрудников """
        parsed = self.parse_fields()
        employee = Employee(
            position=parsed[PupilEnum.POSITION.value],
            specialization=parsed[PupilEnum.SPECIALIZATION.value],
            grade_class=parsed[PupilEnum.GRADE_CLASS.value],
            sex=parsed[PupilEnum.SEX.value],
            last_name=parsed[PupilEnum.LAST_NAME.value],
            first_name=parsed[PupilEnum.FIRST_NAME.value],
        )
        self.maintainer.append(employee)

    def parse_fields(self) -> dict:
        """ Получает данные из строк ввода """
        return {
            PupilEnum.POSITION.value: self.entry_1.get(),
            PupilEnum.SPECIALIZATION.value: self.entry_2.get(),
            PupilEnum.GRADE_CLASS.value: self.entry_3.get(),
            PupilEnum.SEX.value: self.entry_4.get(),
            PupilEnum.LAST_NAME.value: self.entry_5.get(),
            PupilEnum.FIRST_NAME.value: self.entry_6.get(),
        }

    def add_to_file(self):
        data = self.parse_fields()
        write_mode = 'a' if os.path.exists(FILE_PATH) else 'w+'

        with open(FILE_PATH, write_mode) as fw:
            fw.write(str(data))
            fw.write('\n')

    def read_file(self):
        with open(FILE_PATH, 'r') as fr:
            file_lines = fr.readlines()

        print(f'Content of file: {FILE_NAME}')
        for count, line in enumerate(file_lines):
            print(f'line {count}: {line}')

    def clear_file(self):
        with open(FILE_PATH, 'w'): pass


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def init_gui():
    gut = Gui()
